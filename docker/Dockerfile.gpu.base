FROM watsor.base AS base

#
# CUDA 11.1 base
#
# https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/11.1/ubuntu18.04-x86_64/base/Dockerfile
#
RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get purge --autoremove -y curl \
    && rm -rf /var/lib/apt/lists/*

ENV CUDA_VERSION 11.1.1
LABEL com.nvidia.cuda.version="${CUDA_VERSION}"

# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-11-1=11.1.74-1 \
    cuda-compat-11-1 \
    cuda-cupti-11-1 \
    && ln -s cuda-11.1 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf \
    # Required for TensroFlow 2.4.0 to load GPU
    && ln -s /usr/local/cuda/lib64/libcusolver.so.11 /usr/local/cuda/lib64/libcusolver.so.10

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64
ENV LD_LIBRARY_PATH /usr/local/cuda/lib64:${LD_LIBRARY_PATH}

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,video,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=11.1 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 brand=tesla,driver>=450,driver<451"

#
# CUDA 11.1 runtime
#
# https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/11.1/ubuntu18.04-x86_64/runtime/Dockerfile
#
ENV NCCL_VERSION 2.7.8

RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-libraries-11-1=11.1.1-1 \
    libnpp-11-1=11.1.2.301-1 \
    cuda-nvtx-11-1=11.1.74-1 \
    libcublas-11-1=11.3.0.106-1 \
    libnccl2=$NCCL_VERSION-1+cuda11.1 \
    && apt-mark hold libnccl2 \
    && rm -rf /var/lib/apt/lists/*

#
# cuDNN 8.0.5.39 runtime
#
# https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/11.1/ubuntu18.04-x86_64/runtime/cudnn8/Dockerfile
#
ENV CUDNN_VERSION 8.0.5.39

LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"

RUN apt-get update && apt-get install -y --no-install-recommends \
    libcudnn8=$CUDNN_VERSION-1+cuda11.1 \
    && apt-mark hold libcudnn8 && \
    rm -rf /var/lib/apt/lists/*

#
# TensorRT 7.2.2
#
# https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-722/install-guide/index.html#maclearn-net-repo-install-rpm
#
ENV TENSORRT_VERSION 7.2.2
LABEL com.nvidia.tensorrt.version="${TENSORRT_VERSION}"

RUN version=$TENSORRT_VERSION-1+cuda11.1 && \
    apt-get update && apt-get install -y --no-install-recommends \
    libnvinfer7=${version} \
    libnvonnxparsers7=${version} libnvparsers7=${version} \
    libnvinfer-plugin7=${version} \
    python3-libnvinfer=${version} \
    && apt-mark hold \
    libnvinfer7 \
    libnvonnxparsers7 libnvparsers7 \
    libnvinfer-plugin7 \
    python3-libnvinfer \
    && rm -rf /var/lib/apt/lists/*

#
# Use the previous stage as a new temporary stage for building libraries
#
FROM base AS builder

#
# CUDA 11.1 devel
#
# https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/11.1/ubuntu18.04-x86_64/devel/Dockerfile
#
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-nvml-dev-11-1=11.1.74-1 \
    cuda-command-line-tools-11-1=11.1.1-1 \
    cuda-nvprof-11-1=11.1.105-1 \
    libnpp-dev-11-1=11.1.2.301-1 \
    cuda-libraries-dev-11-1=11.1.1-1 \
    cuda-minimal-build-11-1=11.1.1-1 \
    libnccl-dev=2.7.8-1+cuda11.1 \
    libcublas-dev-11-1=11.3.0.106-1 \
    libcusparse-11-1=11.3.0.10-1 \
    libcusparse-dev-11-1=11.3.0.10-1 \
    && apt-mark hold libnccl-dev \
    && rm -rf /var/lib/apt/lists/*

#
# cuDNN 8.0.5.39 devel
#
# https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/11.1/ubuntu18.04-x86_64/devel/cudnn8/Dockerfile
#
RUN apt-get update && apt-get install -y --no-install-recommends \
    libcudnn8-dev=$CUDNN_VERSION-1+cuda11.1 \
    && apt-mark hold libcudnn8 && \
    rm -rf /var/lib/apt/lists/*

#
# TensorRT 7.2.2 devel
#
# https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-722/install-guide/index.html#maclearn-net-repo-install-rpm
#
RUN version=$TENSORRT_VERSION-1+cuda11.1 && \
    apt-get update && apt-get install -y --no-install-recommends \
    libnvinfer-dev=${version} \
    libnvonnxparsers-dev=${version} libnvparsers-dev=${version} \
    libnvinfer-plugin-dev=${version} \
    && apt-mark hold \
    libnvinfer-dev \
    libnvonnxparsers-dev libnvparsers-dev \
    libnvinfer-plugin-dev \
    && rm -rf /var/lib/apt/lists/*

# Install PyCUDA
RUN python3 -m pip install pycuda \
    && python3 -m pip wheel --wheel-dir /tmp/install pycuda

#
# Copy libraries to the final image
#
FROM base AS result

COPY --from=builder /tmp/install /tmp/install

RUN python3 -m pip install /tmp/install/* \
    && rm -r /tmp/install

# Download object detection UFF model
RUN mkdir model && \
    wget -q https://github.com/asmirnou/todus/raw/models/ssd_mobilenet_v2_coco_2018_03_29.uff -O model/gpu.uff && \
    mv model/gpu.uff /usr/share/watsor/model && \
    chown watsor:watsor /usr/share/watsor/model/gpu.uff && \
    rm -r model
